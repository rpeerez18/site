CREATE DATABASE db_siterobotica;
USE db_siterobotica;


CREATE TABLE tb_persons (
  	idperson int(11) NOT NULL AUTO_INCREMENT,
  	desperson varchar(64) NOT NULL,
  	desemail varchar(128) DEFAULT NULL,
 	 nrphone bigint(20) DEFAULT NULL,
  	dtregister timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (idperson)
);

INSERT INTO tb_persons VALUES (1,'Rafael','rpeerez18@gmail.com',2147483647,'2021-12-01 03:00:00'),(7,'Suporte','suporte@gmail.com.br',1112345678,'2021-11-15 16:10:27');


CREATE TABLE tb_users (
 	 iduser int(11) NOT NULL AUTO_INCREMENT,
 	 idperson int(11) NOT NULL,
 	 deslogin varchar(64) NOT NULL,
	  despassword varchar(256) NOT NULL,
 	 inadmin tinyint(4) NOT NULL DEFAULT '0',
  dtregister timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (iduser),
  KEY `FK_users_persons_idx` (idperson),
  CONSTRAINT `fk_users_persons` FOREIGN KEY (idperson) REFERENCES tb_persons (idperson)
);

INSERT INTO tb_users VALUES (1,1,'admin','$2y$12$YlooCyNvyTji8bPRcrfNfOKnVMmZA9ViM2A3IpFjmrpIbp5ovNmga',1,'2021-12-01 03:00:00'),
(7,7,'suporte','$2y$12$HFjgUm/mk1RzTy4ZkJaZBe0Mc/BA2hQyoUckvm.lFa6TesjtNpiMe',1,'2021-11-15 16:10:27');


CREATE TABLE tb_userspasswordsrecoveries (
 	 idrecovery int(11) NOT NULL AUTO_INCREMENT,
  	iduser int(11) NOT NULL,
  	desip varchar(45) NOT NULL,
  	dtrecovery datetime DEFAULT NULL,
  	dtregister timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY (idrecovery),
 KEY fk_userspasswordsrecoveries_users_idx (iduser),
  CONSTRAINT fk_userspasswordsrecoveries_users FOREIGN KEY (iduser) REFERENCES tb_users (iduser)
);

INSERT INTO tb_userspasswordsrecoveries VALUES (1,7,'127.0.0.1',NULL,'2021-11-15 16:10:27'),(2,7,'127.0.0.1','2021-11-16 16:10:27','2021-11-15 16:10:27'),
(3,7,'127.0.0.1','2017-03-15 13:37:35','2017-03-15 16:37:12');

CREATE TABLE tb_categories (
   	idcategory int(11) NOT NULL AUTO_INCREMENT,
   	descategory varchar(64) NOT NULL,
   	dtregister timestamp NOT NULL DEFAULT current_timestamp(),
 PRIMARY KEY (idcategory)
);

CREATE TABLE tb_news (
	idnews int(11) NOT NULL auto_increment,
	nameAuthor char(30) NOT NULL ,
	surname char(30) NOT NULL ,
	dtregister timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
	title varchar(100) NOT NULL ,
	subtitle varchar(200) ,
	textNews text NOT NULL
PRIMARY KEY (idnews)
);

CREATE TABLE tb_projects (
	idprojects int(11) NOT NULL auto_increment,
	title varchar (100) NOT NULL,
	description text NOT NULL,
	participants varchar (200) NOT NULL
	
PRIMARY KEY (idprojects)
);

CREATE TABLE tb_video (
	idvideo int(11) NOT NULL AUTO_INCREMENT,
  	title varchar(100) NOT NULL	
  	urlvideo varchar(128) DEFAULT NULL,
  	dtregister timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (idvideo)
);

DELIMITER $$

CREATE PROCEDURE sp_projects_save(
pidprojects INT,
ptitle VARCHAR(100),
pdescription text,
pparticipants varchar (200)
)
BEGIN
	
	IF pidprojects > 0 THEN
		
		UPDATE tb_projects
        SET 
			title = ptitle,
			description= pdescription,
			participants = pparticipants
            
        WHERE idprojects = pidprojects;
        

    ELSE
		
		INSERT INTO tb_projects (title, description, participants) 
        VALUES(ptitle, pdescription, pparticipants);
        
        SET pidprojects = LAST_INSERT_ID();
        
    END IF;
    
    SELECT * FROM tb_projects WHERE idprojects = pidprojects;
    
END$$

DELIMITER ;

DELIMITER ;;

CREATE PROCEDURE sp_video_save(
pidvideo INT,
ptitle VARCHAR(100),
purlvideo varchar(128)
)
BEGIN
	
	IF pidvideo > 0 THEN
		
		UPDATE tb_video
        SET 
			title = ptitle,
			urlvideo = purlvideo
            
        WHERE idvideo = pidvideo;
        

    ELSE
		
		INSERT INTO tb_video (title, urlvideo ) 
        VALUES(ptitle, purlvideo );
        
        SET pidvideo = LAST_INSERT_ID();
        
    END IF;
    
    SELECT * FROM tb_video WHERE idvideo = pidvideo;
    
END

DELIMITER ;

DELIMITER ;;

CREATE PROCEDURE sp_news_save(

pidnews int(11),
pnameAuthor char(30),
psurname char(30),
ptitle varchar(100),
psubtitle varchar(200),
ptextNews text

)
BEGIN
	
	IF pidnews > 0 THEN
		
		UPDATE tb_news
        SET 
			nameAuthor = pnameAuthor,
            surname = psurname,
            title = ptitle,
            subtitle = psubtitle,
            textNews = ptextNews
          
        WHERE idnews = pidnews;
        

    ELSE
		
		INSERT INTO tb_news (nameAuthor, surname, title, subtitle, textNews ) 
        VALUES(pnameAuthor, psurname, ptitle, psubtitle, ptextNews );
        
        SET pidnews = LAST_INSERT_ID();
        
    END IF;
    
    SELECT * FROM tb_news WHERE idnews = pidnews;
    
END

DELIMITER ;

DELIMITER ;;
CREATE PROCEDURE sp_userspasswordsrecoveries_create(
piduser INT,
pdesip VARCHAR(45)
)
BEGIN
  
  INSERT INTO tb_userspasswordsrecoveries (iduser, desip)
    VALUES(piduser, pdesip);
    
    SELECT * FROM tb_userspasswordsrecoveries
    WHERE idrecovery = LAST_INSERT_ID();
    
END ;;
DELIMITER ;

DELIMITER ;;
CREATE PROCEDURE sp_usersupdate_save(
piduser INT,
pdesperson VARCHAR(64), 
pdeslogin VARCHAR(64), 
pdespassword VARCHAR(256), 
pdesemail VARCHAR(128), 
pnrphone BIGINT, 
pinadmin TINYINT
)
BEGIN
  
    DECLARE vidperson INT;
    
  SELECT idperson INTO vidperson
    FROM tb_users
    WHERE iduser = piduser;
    
    UPDATE tb_persons
    SET 
    desperson = pdesperson,
        desemail = pdesemail,
        nrphone = pnrphone
  WHERE idperson = vidperson;
    
    UPDATE tb_users
    SET
    deslogin = pdeslogin,
        despassword = pdespassword,
        inadmin = pinadmin
  WHERE iduser = piduser;
    
    SELECT * FROM tb_users a INNER JOIN tb_persons b USING(idperson) WHERE a.iduser = piduser;
    
END ;;
DELIMITER ;

DELIMITER ;;
CREATE PROCEDURE sp_users_delete(
piduser INT
)
BEGIN
  
    DECLARE vidperson INT;
    
  SELECT idperson INTO vidperson
    FROM tb_users
    WHERE iduser = piduser;
    
    DELETE FROM tb_users WHERE iduser = piduser;
    DELETE FROM tb_persons WHERE idperson = vidperson;
    
END ;;
DELIMITER ;

DELIMITER ;;
CREATE PROCEDURE sp_users_save(
pdesperson VARCHAR(64), 
pdeslogin VARCHAR(64), 
pdespassword VARCHAR(256), 
pdesemail VARCHAR(128), 
pnrphone BIGINT, 
pinadmin TINYINT
)
BEGIN
  
    DECLARE vidperson INT;
    
  INSERT INTO tb_persons (desperson, desemail, nrphone)
    VALUES(pdesperson, pdesemail, pnrphone);
    
    SET vidperson = LAST_INSERT_ID();
    
    INSERT INTO tb_users (idperson, deslogin, despassword, inadmin)
    VALUES(vidperson, pdeslogin, pdespassword, pinadmin);
    
    SELECT * FROM tb_users a INNER JOIN tb_persons b USING(idperson) WHERE a.iduser = LAST_INSERT_ID();
    
END ;;
DELIMITER ;

DELIMITER ;;
CREATE PROCEDURE sp_categories_save(
pidcategory INT,
pdescategory VARCHAR(64)
)
BEGIN
	
	IF pidcategory > 0 THEN
		
		UPDATE tb_categories
        SET descategory = pdescategory
        WHERE idcategory = pidcategory;
        
    ELSE
		
		INSERT INTO tb_categories (descategory) VALUES(pdescategory);
        
        SET pidcategory = LAST_INSERT_ID();
        
    END IF;
    
    SELECT * FROM tb_categories WHERE idcategory = pidcategory;
    
END ;;
DELIMITER ;